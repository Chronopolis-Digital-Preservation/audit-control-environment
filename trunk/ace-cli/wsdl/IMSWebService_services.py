################################################## 
# IMSWebService_services.py 
# generated by ZSI.generate.wsdl2python
##################################################


from IMSWebService_services_types import *
import urlparse, types
from ZSI.TCcompound import ComplexType, Struct
from ZSI import client
import ZSI
from ZSI.generate.pyclass import pyclass_type

# Locator
class IMSWebServiceLocator:
    IMSWebService_address = "http://ims.umiacs.umd.edu:8080/ace-ims/IMSWebService"
    def getIMSWebServiceAddress(self):
        return IMSWebServiceLocator.IMSWebService_address
    def getIMSWebService(self, url=None, **kw):
        return IMSWebServicePortBindingSOAP(url or IMSWebServiceLocator.IMSWebService_address, **kw)

# Methods
class IMSWebServicePortBindingSOAP:
    def __init__(self, url, **kw):
        kw.setdefault("readerclass", None)
        kw.setdefault("writerclass", None)
        # no resource properties
        self.binding = client.Binding(url=url, **kw)
        # no ws-addressing

    # op: requestLink
    def requestLink(self, request):
        if isinstance(request, requestLink) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(requestLinkResponse.typecode)
        return response

    # op: requestTokensAsync
    def requestTokensAsync(self, request):
        if isinstance(request, requestTokensAsync) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(requestTokensAsyncResponse.typecode)
        return response

    # op: requestTokensImmediate
    def requestTokensImmediate(self, request):
        if isinstance(request, requestTokensImmediate) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(requestTokensImmediateResponse.typecode)
        return response

    # op: getRoundSummaries
    def getRoundSummaries(self, request):
        if isinstance(request, getRoundSummaries) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(getRoundSummariesResponse.typecode)
        return response

    # op: createWitnessProofForRound
    def createWitnessProofForRound(self, request):
        if isinstance(request, createWitnessProofForRound) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(createWitnessProofForRoundResponse.typecode)
        return response

    # op: retrieveTokens
    def retrieveTokens(self, request):
        if isinstance(request, retrieveTokens) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(retrieveTokensResponse.typecode)
        return response

requestLink = ns0.requestLink_Dec().pyclass

requestLinkResponse = ns0.requestLinkResponse_Dec().pyclass

requestTokensAsync = ns0.requestTokensAsync_Dec().pyclass

requestTokensAsyncResponse = ns0.requestTokensAsyncResponse_Dec().pyclass

requestTokensImmediate = ns0.requestTokensImmediate_Dec().pyclass

requestTokensImmediateResponse = ns0.requestTokensImmediateResponse_Dec().pyclass

getRoundSummaries = ns0.getRoundSummaries_Dec().pyclass

getRoundSummariesResponse = ns0.getRoundSummariesResponse_Dec().pyclass

createWitnessProofForRound = ns0.createWitnessProofForRound_Dec().pyclass

createWitnessProofForRoundResponse = ns0.createWitnessProofForRoundResponse_Dec().pyclass

retrieveTokens = ns0.retrieveTokens_Dec().pyclass

retrieveTokensResponse = ns0.retrieveTokensResponse_Dec().pyclass
