################################################## 
# IMSWebService_services_types.py 
# generated by ZSI.generate.wsdl2python
##################################################


import ZSI
import ZSI.TCcompound
from ZSI.schema import LocalElementDeclaration, ElementDeclaration, TypeDefinition, GTD, GED
from ZSI.generate.pyclass import pyclass_type

##############################
# targetNamespace
# http://ws.ims.ace.umiacs.edu/
##############################

class ns0:
    targetNamespace = "http://ws.ims.ace.umiacs.edu/"

    class requestLink_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://ws.ims.ace.umiacs.edu/"
        type = (schema, "requestLink")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.requestLink_Def.schema
            TClist = [ZSI.TC.String(pname="tokenClassName", aname="_tokenClassName", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="hashValue", aname="_hashValue", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._tokenClassName = None
                    self._hashValue = None
                    return
            Holder.__name__ = "requestLink_Holder"
            self.pyclass = Holder

    class requestLinkResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://ws.ims.ace.umiacs.edu/"
        type = (schema, "requestLinkResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.requestLinkResponse_Def.schema
            TClist = [GTD("http://ws.ims.ace.umiacs.edu/","linkResponse",lazy=False)(pname="return", aname="_return", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = None
                    return
            Holder.__name__ = "requestLinkResponse_Holder"
            self.pyclass = Holder

    class linkResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://ws.ims.ace.umiacs.edu/"
        type = (schema, "linkResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.linkResponse_Def.schema
            TClist = [ZSI.TC.String(pname="previousHash", aname="_previousHash", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="rootHash", aname="_rootHash", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="roundId", aname="_roundId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname="timestamp", aname="_timestamp", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="tokenClassName", aname="_tokenClassName", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._previousHash = None
                    self._rootHash = None
                    self._roundId = None
                    self._timestamp = None
                    self._tokenClassName = None
                    return
            Holder.__name__ = "linkResponse_Holder"
            self.pyclass = Holder

    class IMSFault_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://ws.ims.ace.umiacs.edu/"
        type = (schema, "IMSFault")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.IMSFault_Def.schema
            TClist = [ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="serverFault", aname="_serverFault", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="statusCode", aname="_statusCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._message = None
                    self._serverFault = None
                    self._statusCode = None
                    return
            Holder.__name__ = "IMSFault_Holder"
            self.pyclass = Holder

    class retrieveTokens_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://ws.ims.ace.umiacs.edu/"
        type = (schema, "retrieveTokens")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.retrieveTokens_Def.schema
            TClist = [ZSI.TCnumbers.Ilong(pname="requestNumber", aname="_requestNumber", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="sessionKey", aname="_sessionKey", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._requestNumber = None
                    self._sessionKey = None
                    return
            Holder.__name__ = "retrieveTokens_Holder"
            self.pyclass = Holder

    class retrieveTokensResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://ws.ims.ace.umiacs.edu/"
        type = (schema, "retrieveTokensResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.retrieveTokensResponse_Def.schema
            TClist = [GTD("http://ws.ims.ace.umiacs.edu/","tokenResponse",lazy=False)(pname="return", aname="_return", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = []
                    return
            Holder.__name__ = "retrieveTokensResponse_Holder"
            self.pyclass = Holder

    class tokenResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://ws.ims.ace.umiacs.edu/"
        type = (schema, "tokenResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.tokenResponse_Def.schema
            #TClist = [ZSI.TC.String(pname="digestProvider", aname="_digestProvider", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="digestService", aname="_digestService", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://ws.ims.ace.umiacs.edu/","proofElement",lazy=False)(pname="proofElements", aname="_proofElements", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="roundId", aname="_roundId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="statusCode", aname="_statusCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname="timestamp", aname="_timestamp", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="tokenClassName", aname="_tokenClassName", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            TClist = [ZSI.TC.String(pname="digestProvider", aname="_digestProvider", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="digestService", aname="_digestService", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://ws.ims.ace.umiacs.edu/","proofElement",lazy=False)(pname="proofElements", aname="_proofElements", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="roundId", aname="_roundId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="statusCode", aname="_statusCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="timestamp", aname="_timestamp", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="tokenClassName", aname="_tokenClassName", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._digestProvider = None
                    self._digestService = None
                    self._name = None
                    self._proofElements = []
                    self._roundId = None
                    self._statusCode = None
                    self._timestamp = None
                    self._tokenClassName = None
                    return
            Holder.__name__ = "tokenResponse_Holder"
            self.pyclass = Holder

    class proofElement_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://ws.ims.ace.umiacs.edu/"
        type = (schema, "proofElement")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.proofElement_Def.schema
            TClist = [ZSI.TC.String(pname="hashes", aname="_hashes", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="index", aname="_index", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._hashes = []
                    self._index = None
                    return
            Holder.__name__ = "proofElement_Holder"
            self.pyclass = Holder

    class requestTokensImmediate_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://ws.ims.ace.umiacs.edu/"
        type = (schema, "requestTokensImmediate")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.requestTokensImmediate_Def.schema
            TClist = [ZSI.TC.String(pname="tokenClassName", aname="_tokenClassName", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://ws.ims.ace.umiacs.edu/","tokenRequest",lazy=False)(pname="requests", aname="_requests", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._tokenClassName = None
                    self._requests = []
                    return
            Holder.__name__ = "requestTokensImmediate_Holder"
            self.pyclass = Holder

    class tokenRequest_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://ws.ims.ace.umiacs.edu/"
        type = (schema, "tokenRequest")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.tokenRequest_Def.schema
            TClist = [ZSI.TC.String(pname="hashValue", aname="_hashValue", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._hashValue = None
                    self._name = None
                    return
            Holder.__name__ = "tokenRequest_Holder"
            self.pyclass = Holder

    class requestTokensImmediateResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://ws.ims.ace.umiacs.edu/"
        type = (schema, "requestTokensImmediateResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.requestTokensImmediateResponse_Def.schema
            TClist = [GTD("http://ws.ims.ace.umiacs.edu/","tokenResponse",lazy=False)(pname="return", aname="_return", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = []
                    return
            Holder.__name__ = "requestTokensImmediateResponse_Holder"
            self.pyclass = Holder

    class requestTokensAsync_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://ws.ims.ace.umiacs.edu/"
        type = (schema, "requestTokensAsync")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.requestTokensAsync_Def.schema
            TClist = [ZSI.TC.String(pname="tokenClassName", aname="_tokenClassName", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://ws.ims.ace.umiacs.edu/","tokenRequest",lazy=False)(pname="requests", aname="_requests", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._tokenClassName = None
                    self._requests = []
                    return
            Holder.__name__ = "requestTokensAsync_Holder"
            self.pyclass = Holder

    class requestTokensAsyncResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://ws.ims.ace.umiacs.edu/"
        type = (schema, "requestTokensAsyncResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.requestTokensAsyncResponse_Def.schema
            TClist = [GTD("http://ws.ims.ace.umiacs.edu/","tokenReceipt",lazy=False)(pname="return", aname="_return", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = None
                    return
            Holder.__name__ = "requestTokensAsyncResponse_Holder"
            self.pyclass = Holder

    class tokenReceipt_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://ws.ims.ace.umiacs.edu/"
        type = (schema, "tokenReceipt")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.tokenReceipt_Def.schema
            TClist = [ZSI.TCtimes.gDateTime(pname="now", aname="_now", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname="readyAt", aname="_readyAt", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="requestNumber", aname="_requestNumber", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="sessionKey", aname="_sessionKey", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._now = None
                    self._readyAt = None
                    self._requestNumber = None
                    self._sessionKey = None
                    return
            Holder.__name__ = "tokenReceipt_Holder"
            self.pyclass = Holder

    class getRoundSummaries_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://ws.ims.ace.umiacs.edu/"
        type = (schema, "getRoundSummaries")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getRoundSummaries_Def.schema
            TClist = [ZSI.TCnumbers.Ilong(pname="rounds", aname="_rounds", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rounds = []
                    return
            Holder.__name__ = "getRoundSummaries_Holder"
            self.pyclass = Holder

    class getRoundSummariesResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://ws.ims.ace.umiacs.edu/"
        type = (schema, "getRoundSummariesResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getRoundSummariesResponse_Def.schema
            TClist = [GTD("http://ws.ims.ace.umiacs.edu/","roundSummary",lazy=False)(pname="return", aname="_return", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = []
                    return
            Holder.__name__ = "getRoundSummariesResponse_Holder"
            self.pyclass = Holder

    class roundSummary_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://ws.ims.ace.umiacs.edu/"
        type = (schema, "roundSummary")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.roundSummary_Def.schema
            TClist = [ZSI.TC.String(pname="hashValue", aname="_hashValue", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="id", aname="_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname="timestamp", aname="_timestamp", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://ws.ims.ace.umiacs.edu/","tokenClass",lazy=False)(pname="tokenClass", aname="_tokenClass", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._hashValue = None
                    self._id = None
                    self._timestamp = None
                    self._tokenClass = None
                    return
            Holder.__name__ = "roundSummary_Holder"
            self.pyclass = Holder

    class tokenClass_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://ws.ims.ace.umiacs.edu/"
        type = (schema, "tokenClass")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.tokenClass_Def.schema
            TClist = [ZSI.TC.String(pname="digestProviderName", aname="_digestProviderName", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="digestServiceName", aname="_digestServiceName", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="id", aname="_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="linkingAllowed", aname="_linkingAllowed", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="maximumRequests", aname="_maximumRequests", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="minimumRequests", aname="_minimumRequests", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="requestAsyncAllowed", aname="_requestAsyncAllowed", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="requestImmediateAllowed", aname="_requestImmediateAllowed", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="requestTimeout", aname="_requestTimeout", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="roundLength", aname="_roundLength", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="treeOrder", aname="_treeOrder", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._digestProviderName = None
                    self._digestServiceName = None
                    self._id = None
                    self._linkingAllowed = None
                    self._maximumRequests = None
                    self._minimumRequests = None
                    self._name = None
                    self._requestAsyncAllowed = None
                    self._requestImmediateAllowed = None
                    self._requestTimeout = None
                    self._roundLength = None
                    self._treeOrder = None
                    return
            Holder.__name__ = "tokenClass_Holder"
            self.pyclass = Holder

    class createWitnessProofForRound_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://ws.ims.ace.umiacs.edu/"
        type = (schema, "createWitnessProofForRound")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.createWitnessProofForRound_Def.schema
            TClist = [ZSI.TCnumbers.Ilong(pname="rounds", aname="_rounds", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rounds = []
                    return
            Holder.__name__ = "createWitnessProofForRound_Holder"
            self.pyclass = Holder

    class createWitnessProofForRoundResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://ws.ims.ace.umiacs.edu/"
        type = (schema, "createWitnessProofForRoundResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.createWitnessProofForRoundResponse_Def.schema
            TClist = [GTD("http://ws.ims.ace.umiacs.edu/","roundResponse",lazy=False)(pname="return", aname="_return", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = []
                    return
            Holder.__name__ = "createWitnessProofForRoundResponse_Holder"
            self.pyclass = Holder

    class roundResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://ws.ims.ace.umiacs.edu/"
        type = (schema, "roundResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.roundResponse_Def.schema
            TClist = [ZSI.TC.String(pname="digestProvider", aname="_digestProvider", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="digestService", aname="_digestService", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://ws.ims.ace.umiacs.edu/","proofElement",lazy=False)(pname="proofElements", aname="_proofElements", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="roundId", aname="_roundId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname="roundTimestamp", aname="_roundTimestamp", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="tokenClassName", aname="_tokenClassName", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="witnessId", aname="_witnessId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._digestProvider = None
                    self._digestService = None
                    self._proofElements = []
                    self._roundId = None
                    self._roundTimestamp = None
                    self._tokenClassName = None
                    self._witnessId = None
                    return
            Holder.__name__ = "roundResponse_Holder"
            self.pyclass = Holder

    class IMSFault_Dec(ElementDeclaration):
        literal = "IMSFault"
        schema = "http://ws.ims.ace.umiacs.edu/"
        def __init__(self, **kw):
            kw["pname"] = ("http://ws.ims.ace.umiacs.edu/","IMSFault")
            kw["aname"] = "_IMSFault"
            if ns0.IMSFault_Def not in ns0.IMSFault_Dec.__bases__:
                bases = list(ns0.IMSFault_Dec.__bases__)
                bases.insert(0, ns0.IMSFault_Def)
                ns0.IMSFault_Dec.__bases__ = tuple(bases)

            ns0.IMSFault_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "IMSFault_Dec_Holder"

    class createWitnessProofForRound_Dec(ElementDeclaration):
        literal = "createWitnessProofForRound"
        schema = "http://ws.ims.ace.umiacs.edu/"
        def __init__(self, **kw):
            kw["pname"] = ("http://ws.ims.ace.umiacs.edu/","createWitnessProofForRound")
            kw["aname"] = "_createWitnessProofForRound"
            if ns0.createWitnessProofForRound_Def not in ns0.createWitnessProofForRound_Dec.__bases__:
                bases = list(ns0.createWitnessProofForRound_Dec.__bases__)
                bases.insert(0, ns0.createWitnessProofForRound_Def)
                ns0.createWitnessProofForRound_Dec.__bases__ = tuple(bases)

            ns0.createWitnessProofForRound_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "createWitnessProofForRound_Dec_Holder"

    class createWitnessProofForRoundResponse_Dec(ElementDeclaration):
        literal = "createWitnessProofForRoundResponse"
        schema = "http://ws.ims.ace.umiacs.edu/"
        def __init__(self, **kw):
            kw["pname"] = ("http://ws.ims.ace.umiacs.edu/","createWitnessProofForRoundResponse")
            kw["aname"] = "_createWitnessProofForRoundResponse"
            if ns0.createWitnessProofForRoundResponse_Def not in ns0.createWitnessProofForRoundResponse_Dec.__bases__:
                bases = list(ns0.createWitnessProofForRoundResponse_Dec.__bases__)
                bases.insert(0, ns0.createWitnessProofForRoundResponse_Def)
                ns0.createWitnessProofForRoundResponse_Dec.__bases__ = tuple(bases)

            ns0.createWitnessProofForRoundResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "createWitnessProofForRoundResponse_Dec_Holder"

    class getRoundSummaries_Dec(ElementDeclaration):
        literal = "getRoundSummaries"
        schema = "http://ws.ims.ace.umiacs.edu/"
        def __init__(self, **kw):
            kw["pname"] = ("http://ws.ims.ace.umiacs.edu/","getRoundSummaries")
            kw["aname"] = "_getRoundSummaries"
            if ns0.getRoundSummaries_Def not in ns0.getRoundSummaries_Dec.__bases__:
                bases = list(ns0.getRoundSummaries_Dec.__bases__)
                bases.insert(0, ns0.getRoundSummaries_Def)
                ns0.getRoundSummaries_Dec.__bases__ = tuple(bases)

            ns0.getRoundSummaries_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getRoundSummaries_Dec_Holder"

    class getRoundSummariesResponse_Dec(ElementDeclaration):
        literal = "getRoundSummariesResponse"
        schema = "http://ws.ims.ace.umiacs.edu/"
        def __init__(self, **kw):
            kw["pname"] = ("http://ws.ims.ace.umiacs.edu/","getRoundSummariesResponse")
            kw["aname"] = "_getRoundSummariesResponse"
            if ns0.getRoundSummariesResponse_Def not in ns0.getRoundSummariesResponse_Dec.__bases__:
                bases = list(ns0.getRoundSummariesResponse_Dec.__bases__)
                bases.insert(0, ns0.getRoundSummariesResponse_Def)
                ns0.getRoundSummariesResponse_Dec.__bases__ = tuple(bases)

            ns0.getRoundSummariesResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getRoundSummariesResponse_Dec_Holder"

    class requestLink_Dec(ElementDeclaration):
        literal = "requestLink"
        schema = "http://ws.ims.ace.umiacs.edu/"
        def __init__(self, **kw):
            kw["pname"] = ("http://ws.ims.ace.umiacs.edu/","requestLink")
            kw["aname"] = "_requestLink"
            if ns0.requestLink_Def not in ns0.requestLink_Dec.__bases__:
                bases = list(ns0.requestLink_Dec.__bases__)
                bases.insert(0, ns0.requestLink_Def)
                ns0.requestLink_Dec.__bases__ = tuple(bases)

            ns0.requestLink_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "requestLink_Dec_Holder"

    class requestLinkResponse_Dec(ElementDeclaration):
        literal = "requestLinkResponse"
        schema = "http://ws.ims.ace.umiacs.edu/"
        def __init__(self, **kw):
            kw["pname"] = ("http://ws.ims.ace.umiacs.edu/","requestLinkResponse")
            kw["aname"] = "_requestLinkResponse"
            if ns0.requestLinkResponse_Def not in ns0.requestLinkResponse_Dec.__bases__:
                bases = list(ns0.requestLinkResponse_Dec.__bases__)
                bases.insert(0, ns0.requestLinkResponse_Def)
                ns0.requestLinkResponse_Dec.__bases__ = tuple(bases)

            ns0.requestLinkResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "requestLinkResponse_Dec_Holder"

    class requestTokensAsync_Dec(ElementDeclaration):
        literal = "requestTokensAsync"
        schema = "http://ws.ims.ace.umiacs.edu/"
        def __init__(self, **kw):
            kw["pname"] = ("http://ws.ims.ace.umiacs.edu/","requestTokensAsync")
            kw["aname"] = "_requestTokensAsync"
            if ns0.requestTokensAsync_Def not in ns0.requestTokensAsync_Dec.__bases__:
                bases = list(ns0.requestTokensAsync_Dec.__bases__)
                bases.insert(0, ns0.requestTokensAsync_Def)
                ns0.requestTokensAsync_Dec.__bases__ = tuple(bases)

            ns0.requestTokensAsync_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "requestTokensAsync_Dec_Holder"

    class requestTokensAsyncResponse_Dec(ElementDeclaration):
        literal = "requestTokensAsyncResponse"
        schema = "http://ws.ims.ace.umiacs.edu/"
        def __init__(self, **kw):
            kw["pname"] = ("http://ws.ims.ace.umiacs.edu/","requestTokensAsyncResponse")
            kw["aname"] = "_requestTokensAsyncResponse"
            if ns0.requestTokensAsyncResponse_Def not in ns0.requestTokensAsyncResponse_Dec.__bases__:
                bases = list(ns0.requestTokensAsyncResponse_Dec.__bases__)
                bases.insert(0, ns0.requestTokensAsyncResponse_Def)
                ns0.requestTokensAsyncResponse_Dec.__bases__ = tuple(bases)

            ns0.requestTokensAsyncResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "requestTokensAsyncResponse_Dec_Holder"

    class requestTokensImmediate_Dec(ElementDeclaration):
        literal = "requestTokensImmediate"
        schema = "http://ws.ims.ace.umiacs.edu/"
        def __init__(self, **kw):
            kw["pname"] = ("http://ws.ims.ace.umiacs.edu/","requestTokensImmediate")
            kw["aname"] = "_requestTokensImmediate"
            if ns0.requestTokensImmediate_Def not in ns0.requestTokensImmediate_Dec.__bases__:
                bases = list(ns0.requestTokensImmediate_Dec.__bases__)
                bases.insert(0, ns0.requestTokensImmediate_Def)
                ns0.requestTokensImmediate_Dec.__bases__ = tuple(bases)

            ns0.requestTokensImmediate_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "requestTokensImmediate_Dec_Holder"

    class requestTokensImmediateResponse_Dec(ElementDeclaration):
        literal = "requestTokensImmediateResponse"
        schema = "http://ws.ims.ace.umiacs.edu/"
        def __init__(self, **kw):
            kw["pname"] = ("http://ws.ims.ace.umiacs.edu/","requestTokensImmediateResponse")
            kw["aname"] = "_requestTokensImmediateResponse"
            if ns0.requestTokensImmediateResponse_Def not in ns0.requestTokensImmediateResponse_Dec.__bases__:
                bases = list(ns0.requestTokensImmediateResponse_Dec.__bases__)
                bases.insert(0, ns0.requestTokensImmediateResponse_Def)
                ns0.requestTokensImmediateResponse_Dec.__bases__ = tuple(bases)

            ns0.requestTokensImmediateResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "requestTokensImmediateResponse_Dec_Holder"

    class retrieveTokens_Dec(ElementDeclaration):
        literal = "retrieveTokens"
        schema = "http://ws.ims.ace.umiacs.edu/"
        def __init__(self, **kw):
            kw["pname"] = ("http://ws.ims.ace.umiacs.edu/","retrieveTokens")
            kw["aname"] = "_retrieveTokens"
            if ns0.retrieveTokens_Def not in ns0.retrieveTokens_Dec.__bases__:
                bases = list(ns0.retrieveTokens_Dec.__bases__)
                bases.insert(0, ns0.retrieveTokens_Def)
                ns0.retrieveTokens_Dec.__bases__ = tuple(bases)

            ns0.retrieveTokens_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "retrieveTokens_Dec_Holder"

    class retrieveTokensResponse_Dec(ElementDeclaration):
        literal = "retrieveTokensResponse"
        schema = "http://ws.ims.ace.umiacs.edu/"
        def __init__(self, **kw):
            kw["pname"] = ("http://ws.ims.ace.umiacs.edu/","retrieveTokensResponse")
            kw["aname"] = "_retrieveTokensResponse"
            if ns0.retrieveTokensResponse_Def not in ns0.retrieveTokensResponse_Dec.__bases__:
                bases = list(ns0.retrieveTokensResponse_Dec.__bases__)
                bases.insert(0, ns0.retrieveTokensResponse_Def)
                ns0.retrieveTokensResponse_Dec.__bases__ = tuple(bases)

            ns0.retrieveTokensResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "retrieveTokensResponse_Dec_Holder"

# end class ns0 (tns: http://ws.ims.ace.umiacs.edu/)
